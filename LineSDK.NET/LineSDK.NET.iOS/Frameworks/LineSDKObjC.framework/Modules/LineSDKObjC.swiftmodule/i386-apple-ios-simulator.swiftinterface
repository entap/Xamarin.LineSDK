// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 effective-4.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name LineSDKObjC
import Foundation
@_exported import LineSDK
@_exported import LineSDKObjC
import Swift
@_exported import UIKit
import _Concurrency
@objc extension Foundation.NSNotification {
  @objc public static let LineSDKAccessTokenDidUpdate: Foundation.Notification.Name
  @objc public static let LineSDKAccessTokenDidRemove: Foundation.Notification.Name
}
@objc extension Foundation.NSNotification {
  @objc public static let LineSDKOldAccessTokenKey: Swift.String
  @objc public static let LineSDKNewAccessTokenKey: Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKAccessTokenStore : ObjectiveC.NSObject {
  @objc public static let sharedStore: LineSDKObjC.LineSDKAccessTokenStore
  @objc public var currentToken: LineSDKObjC.LineSDKAccessToken? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKCallbackQueue : ObjectiveC.NSObject {
  @objc public static let asyncMain: LineSDKObjC.LineSDKCallbackQueue
  @objc public static let currentMainOrAsync: LineSDKObjC.LineSDKCallbackQueue
  @objc public static let untouch: LineSDKObjC.LineSDKCallbackQueue
  @objc public static func callbackQueue(dispatchQueue: Dispatch.DispatchQueue) -> LineSDKObjC.LineSDKCallbackQueue
  @objc public static func callbackQueue(operationQueue: Foundation.OperationQueue) -> LineSDKObjC.LineSDKCallbackQueue
  @objc deinit
}
@objc @objcMembers public class LineSDKTemplateImageCarouselPayloadColumn : ObjectiveC.NSObject {
  @objc public var imageURL: Foundation.URL
  @objc public var action: LineSDKObjC.LineSDKMessageAction?
  @objc public init?(imageURL: Foundation.URL, action: LineSDKObjC.LineSDKMessageAction?)
  @objc deinit
}
@objc @objcMembers public class LineSDKTemplateImageCarouselPayload : LineSDKObjC.LineSDKTemplateMessagePayload {
  @objc public var columns: [LineSDKObjC.LineSDKTemplateImageCarouselPayloadColumn]
  @objc public init(columns: [LineSDKObjC.LineSDKTemplateImageCarouselPayloadColumn])
  @objc public func addColumn(_ column: LineSDKObjC.LineSDKTemplateImageCarouselPayloadColumn)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKTemplateMessage : LineSDKObjC.LineSDKMessage {
  @objc public var altText: Swift.String
  @objc public var payload: LineSDKObjC.LineSDKTemplateMessagePayload
  @objc public init(altText: Swift.String, payload: LineSDKObjC.LineSDKTemplateMessagePayload)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKTemplateMessagePayload : ObjectiveC.NSObject {
  @objc public var buttonsPayload: LineSDKObjC.LineSDKTemplateButtonsPayload? {
    @objc get
  }
  @objc public var confirmPayload: LineSDKObjC.LineSDKTemplateConfirmPayload? {
    @objc get
  }
  @objc public var carouselPayload: LineSDKObjC.LineSDKTemplateCarouselPayload? {
    @objc get
  }
  @objc public var imageCarouselPayload: LineSDKObjC.LineSDKTemplateImageCarouselPayload? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LineSDKTemplateMessagePayloadImageAspectRatio : Swift.Int {
  case none
  case rectangle
  case square
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKTemplateMessagePayloadImageContentMode : Swift.Int {
  case none
  case aspectFill
  case aspectFit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKAuthAPI : ObjectiveC.NSObject {
  @objc public static func refreshAccessToken(completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessToken?, Swift.Error?) -> Swift.Void)
  @objc public static func refreshAccessToken(callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessToken?, Swift.Error?) -> Swift.Void)
  @objc public static func revokeAccessToken(completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func revokeAccessToken(_ token: Swift.String?, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func revokeAccessToken(_ token: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func revokeRefreshToken(completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func revokeRefreshToken(_ token: Swift.String?, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func revokeRefreshToken(_ token: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func verifyAccessToken(completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
  @objc public static func verifyAccessToken(_ token: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
  @objc public static func verifyAccessToken(_ token: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKAPI : ObjectiveC.NSObject {
  @objc public static func getProfile(completionHandler completion: @escaping (LineSDKObjC.LineSDKUserProfile?, Swift.Error?) -> Swift.Void)
  @objc public static func getProfile(callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKUserProfile?, Swift.Error?) -> Swift.Void)
  @objc public static func getFriends(pageToken: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetFriendsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getFriends(sort: LineSDKObjC.LineSDKGetFriendsRequestSort, pageToken: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetFriendsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getFriends(sort: LineSDKObjC.LineSDKGetFriendsRequestSort, pageToken: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetFriendsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getApproversInFriends(pageToken: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetApproversInFriendsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getApproversInFriends(pageToken: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetApproversInFriendsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getGroups(pageToken: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetGroupsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getGroups(pageToken: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetGroupsResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getApproversInGroup(groupID: Swift.String, pageToken: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetApproversInGroupResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getApproversInGroup(groupID: Swift.String, pageToken: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetApproversInGroupResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func sendMessages(_ messages: [LineSDKObjC.LineSDKMessage], to chatID: Swift.String, completionHandler completion: @escaping (LineSDKObjC.LineSDKPostSendMessagesResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func sendMessages(_ messages: [LineSDKObjC.LineSDKMessage], to chatID: Swift.String, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKPostSendMessagesResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func multiSendMessages(_ messages: [LineSDKObjC.LineSDKMessage], to userIDs: [Swift.String], completionHandler completion: @escaping (LineSDKObjC.LineSDKPostMultisendMessagesResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func multiSendMessages(_ messages: [LineSDKObjC.LineSDKMessage], to userIDs: [Swift.String], callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKPostMultisendMessagesResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getBotFriendshipStatus(completionHandler completion: @escaping (LineSDKObjC.LineSDKGetBotFriendshipStatusResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getBotFriendshipStatus(callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKGetBotFriendshipStatusResponse?, Swift.Error?) -> Swift.Void)
  @objc public static func getMessageSendingOneTimeToken(userIDs: [Swift.String], completionHander completion: @escaping (LineSDKObjC.LineSDKMessageSendingToken?, Swift.Error?) -> Swift.Void)
  @objc public static func getMessageSendingOneTimeToken(userIDs: [Swift.String], callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHander completion: @escaping (LineSDKObjC.LineSDKMessageSendingToken?, Swift.Error?) -> Swift.Void)
  @objc public static func multiSendMessages(_ messages: [LineSDKObjC.LineSDKMessage], withMessageToken token: LineSDKObjC.LineSDKMessageSendingToken, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func multiSendMessages(_ messages: [LineSDKObjC.LineSDKMessage], withMessageToken token: LineSDKObjC.LineSDKMessageSendingToken, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomStatus(openChatId: Swift.String, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomStatus?, Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomStatus(openChatId: Swift.String, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomStatus?, Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomMembershipState(openChatId: Swift.String, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomMembershipState?, Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomMembershipState(openChatId: Swift.String, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomMembershipState?, Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomJoinType(openChatId: Swift.String, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomJoinType?, Swift.Error?) -> Swift.Void)
  @objc public static func getOpenChatRoomJoinType(openChatId: Swift.String, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKOpenChatRoomJoinType?, Swift.Error?) -> Swift.Void)
  @objc public static func postOpenChatRoomJoin(openChatId: Swift.String, displayName: Swift.String, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func postOpenChatRoomJoin(openChatId: Swift.String, displayName: Swift.String, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension LineSDKObjC.LineSDKAPI {
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.refreshAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func refreshAccessToken(completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessToken?, Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.refreshAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func refreshAccessToken(callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessToken?, Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.revokeAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func revokeAccessToken(completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.revokeAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func revokeAccessToken(_ token: Swift.String?, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.revokeAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func revokeAccessToken(_ token: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.verifyAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func verifyAccessToken(completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.verifyAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func verifyAccessToken(_ token: Swift.String?, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "LineSDKAuthAPI.verifyAccessToken", message: "Auth-related APIs don't refresh access tokens automatically.\nMake sure you don't need token refreshing as a side effect, then use methods in `LineSDKAuthAPI` instead.")
  public static func verifyAccessToken(_ token: Swift.String?, callbackQueue queue: LineSDKObjC.LineSDKCallbackQueue, completionHandler completion: @escaping (LineSDKObjC.LineSDKAccessTokenVerifyResult?, Swift.Error?) -> Swift.Void)
}
@objc @objcMembers public class LineSDKTemplateButtonsPayload : LineSDKObjC.LineSDKTemplateMessagePayload {
  @objc public var text: Swift.String
  @objc public var title: Swift.String?
  @objc public var actions: [LineSDKObjC.LineSDKMessageAction]
  @objc public var defaultAction: LineSDKObjC.LineSDKMessageAction?
  @objc public var thumbnailImageURL: Foundation.URL?
  @objc public var imageAspectRatio: LineSDKObjC.LineSDKTemplateMessagePayloadImageAspectRatio
  @objc public var imageContentMode: LineSDKObjC.LineSDKTemplateMessagePayloadImageContentMode
  @objc public var imageBackgroundColor: LineSDKObjC.LineSDKHexColor?
  @objc public var sender: LineSDKObjC.LineSDKMessageSender?
  @objc public init(title: Swift.String?, text: Swift.String, actions: [LineSDKObjC.LineSDKMessageAction])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKJWT : ObjectiveC.NSObject {
  @objc final public let payload: LineSDKObjC.LineSDKJWTPayload
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKJWTPayload : ObjectiveC.NSObject {
  @objc public func getString(forKey key: Swift.String) -> Swift.String?
  @objc public func getNumber(forKey key: Swift.String) -> Foundation.NSNumber?
  @objc public var issuer: Swift.String? {
    @objc get
  }
  @objc public var subject: Swift.String? {
    @objc get
  }
  @objc public var audience: Swift.String? {
    @objc get
  }
  @objc public var expiration: Foundation.Date? {
    @objc get
  }
  @objc public var issueAt: Foundation.Date? {
    @objc get
  }
  @objc public var name: Swift.String? {
    @objc get
  }
  @objc public var picture: Foundation.URL? {
    @objc get
  }
  @objc public var email: Swift.String? {
    @objc get
  }
  @objc public var amr: [Swift.String]? {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKTemplateConfirmPayload : LineSDKObjC.LineSDKTemplateMessagePayload {
  @objc public var text: Swift.String
  @objc public var confirmAction: LineSDKObjC.LineSDKMessageAction
  @objc public var cancelAction: LineSDKObjC.LineSDKMessageAction
  @objc public init(text: Swift.String, confirmAction: LineSDKObjC.LineSDKMessageAction, cancelAction: LineSDKObjC.LineSDKMessageAction)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGroup : ObjectiveC.NSObject {
  @objc public var groupID: Swift.String {
    @objc get
  }
  @objc public var groupName: Swift.String {
    @objc get
  }
  @objc public var pictureURL: Foundation.URL? {
    @objc get
  }
  @objc public var pictureURLSmall: Foundation.URL? {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKConstant : ObjectiveC.NSObject {
  @objc public static let SDKVersion: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class LineSDKFlexBoxComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc final public let layout: LineSDKObjC.LineSDKFlexMessageComponentLayout
  @objc public var contents: [LineSDKObjC.LineSDKFlexMessageComponent]
  @objc public var flex: Foundation.NSNumber?
  @objc public var spacing: LineSDKObjC.LineSDKFlexMessageComponentSpacing
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var action: LineSDKObjC.LineSDKMessageAction?
  @objc public init(layout: LineSDKObjC.LineSDKFlexMessageComponentLayout, contents: [LineSDKObjC.LineSDKFlexMessageComponent])
  @objc public func addComponent(_ value: LineSDKObjC.LineSDKFlexMessageComponent)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKOpenChatRoomStatus : ObjectiveC.NSObject {
  @objc public var status: Swift.String {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKAccessTokenVerifyResult : ObjectiveC.NSObject {
  @objc public var channelID: Swift.String {
    @objc get
  }
  @objc public var permissions: [LineSDKObjC.LineSDKLoginPermission] {
    @objc get
  }
  @objc public var expiresIn: Foundation.TimeInterval {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKTemplateCarouselPayloadColumn : ObjectiveC.NSObject {
  @objc public var text: Swift.String
  @objc public var title: Swift.String?
  @objc public var actions: [LineSDKObjC.LineSDKMessageAction]
  @objc public var defaultAction: LineSDKObjC.LineSDKMessageAction?
  @objc public var thumbnailImageURL: Foundation.URL?
  @objc public var imageBackgroundColor: LineSDKObjC.LineSDKHexColor?
  @objc public init(title: Swift.String?, text: Swift.String, actions: [LineSDKObjC.LineSDKMessageAction])
  @objc public func addAction(_ value: LineSDKObjC.LineSDKMessageAction)
  @objc deinit
}
@objc @objcMembers public class LineSDKTemplateCarouselPayload : LineSDKObjC.LineSDKTemplateMessagePayload {
  @objc public var columns: [LineSDKObjC.LineSDKTemplateCarouselPayloadColumn]
  @objc public var imageAspectRatio: LineSDKObjC.LineSDKTemplateMessagePayloadImageAspectRatio
  @objc public var imageContentMode: LineSDKObjC.LineSDKTemplateMessagePayloadImageContentMode
  @objc public init(columns: [LineSDKObjC.LineSDKTemplateCarouselPayloadColumn])
  @objc public func addColumn(_ column: LineSDKObjC.LineSDKTemplateCarouselPayloadColumn)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKUser : ObjectiveC.NSObject {
  @objc public var userID: Swift.String {
    @objc get
  }
  @objc public var displayName: Swift.String {
    @objc get
  }
  @objc public var displayNameOriginal: Swift.String {
    @objc get
  }
  @objc public var displayNameOverridden: Swift.String? {
    @objc get
  }
  @objc public var pictureURL: Foundation.URL? {
    @objc get
  }
  @objc public var pictureURLSmall: Foundation.URL? {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKMessage : ObjectiveC.NSObject {
  public static func message(with input: LineSDK.MessageConvertible) -> LineSDKObjC.LineSDKMessage?
  @objc public var textMessage: LineSDKObjC.LineSDKTextMessage? {
    @objc get
  }
  @objc public var imageMessage: LineSDKObjC.LineSDKImageMessage? {
    @objc get
  }
  @objc public var videoMessage: LineSDKObjC.LineSDKVideoMessage? {
    @objc get
  }
  @objc public var audioMessage: LineSDKObjC.LineSDKAudioMessage? {
    @objc get
  }
  @objc public var locationMessage: LineSDKObjC.LineSDKLocationMessage? {
    @objc get
  }
  @objc public var templateMessage: LineSDKObjC.LineSDKTemplateMessage? {
    @objc get
  }
  @objc public var flexMessage: LineSDKObjC.LineSDKFlexMessage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKMessageSender : ObjectiveC.NSObject {
  @objc public var label: Swift.String {
    @objc get
    @objc set
  }
  @objc public var iconURL: Foundation.URL {
    @objc get
    @objc set
  }
  @objc public var linkURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc public init(label: Swift.String, iconURL: Foundation.URL, linkURL: Foundation.URL?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGetFriendsResponse : ObjectiveC.NSObject {
  @objc public var friends: [LineSDKObjC.LineSDKUser] {
    @objc get
  }
  @objc public var pageToken: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGetGroupsResponse : ObjectiveC.NSObject {
  @objc public var groups: [LineSDKObjC.LineSDKGroup] {
    @objc get
  }
  @objc public var pageToken: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGetApproversInFriendsResponse : ObjectiveC.NSObject {
  @objc public var friends: [LineSDKObjC.LineSDKUser] {
    @objc get
  }
  @objc public var pageToken: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGetApproversInGroupResponse : ObjectiveC.NSObject {
  @objc public var users: [LineSDKObjC.LineSDKUser] {
    @objc get
  }
  @objc public var pageToken: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc public enum LineSDKGetFriendsRequestSort : Swift.Int {
  case none
  case name
  case relation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol LineSDKOpenChatCreatingControllerDelegate {
  @objc optional func openChatCreatingController(_ controller: LineSDKObjC.LineSDKOpenChatCreatingController, didCreateChatRoom room: LineSDKObjC.LineSDKOpenChatRoomInfo, withCreatingItem item: LineSDKObjC.LineSDKOpenChatRoomCreatingItem)
  @objc optional func openChatCreatingController(_ controller: LineSDKObjC.LineSDKOpenChatCreatingController, didFailWithError error: Swift.Error, withCreatingItem item: LineSDKObjC.LineSDKOpenChatRoomCreatingItem, presentingViewController: UIKit.UIViewController)
  @objc optional func openChatCreatingController(_ controller: LineSDKObjC.LineSDKOpenChatCreatingController, shouldPreventUserTermAlertFrom presentingViewController: UIKit.UIViewController) -> Swift.Bool
  @objc optional func openChatCreatingControllerDidCancelCreating(_ controller: LineSDKObjC.LineSDKOpenChatCreatingController)
  @objc optional func openChatCreatingController(_ controller: LineSDKObjC.LineSDKOpenChatCreatingController, willPresentCreatingNavigationController navigationController: UIKit.UINavigationController)
}
@objc @objcMembers public class LineSDKFlexCarouselContainer : LineSDKObjC.LineSDKFlexMessageContainer {
  @objc public var contents: [LineSDKObjC.LineSDKFlexBubbleContainer]
  @objc public init(contents: [LineSDKObjC.LineSDKFlexBubbleContainer])
  @objc public func addBubble(_ value: LineSDKObjC.LineSDKFlexBubbleContainer)
  @objc deinit
}
@objc @objcMembers public class LineSDKFlexTextComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc public var text: Swift.String
  @objc public var flex: Foundation.NSNumber?
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var size: LineSDKObjC.LineSDKFlexMessageComponentSize
  @objc public var alignment: LineSDKObjC.LineSDKFlexMessageComponentAlignment
  @objc public var gravity: LineSDKObjC.LineSDKFlexMessageComponentGravity
  @objc public var wrapping: Swift.Bool
  @objc public var maxLines: Foundation.NSNumber?
  @objc public var weight: LineSDKObjC.LineSDKFlexMessageComponentWeight
  @objc public var color: LineSDKObjC.LineSDKHexColor?
  @objc public var action: LineSDKObjC.LineSDKMessageAction?
  @objc public init(text: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKUserProfile : ObjectiveC.NSObject {
  @objc public var userID: Swift.String {
    @objc get
  }
  @objc public var displayName: Swift.String {
    @objc get
  }
  @objc public var pictureURL: Foundation.URL? {
    @objc get
  }
  @objc public var pictureURLLarge: Foundation.URL? {
    @objc get
  }
  @objc public var pictureURLSmall: Foundation.URL? {
    @objc get
  }
  @objc public var statusMessage: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @available(*, deprecated, message: "Use `LineSDKLoginManagerParameters` instead.")
@objcMembers public class LineSDKLoginManagerOptions : ObjectiveC.NSObject {
  @objc public init(rawValue: Swift.Int)
  @objc public static let onlyWebLogin: LineSDKObjC.LineSDKLoginManagerOptions
  @objc public static let botPromptNormal: LineSDKObjC.LineSDKLoginManagerOptions
  @objc public static let botPromptAggressive: LineSDKObjC.LineSDKLoginManagerOptions
  @objc deinit
}
@objc @objcMembers final public class LineSDKAuthorizationStatus : ObjectiveC.NSObject {
  @objc final public let rawValue: Swift.Int
  @objc public static let authorized: LineSDKObjC.LineSDKAuthorizationStatus
  @objc public static let lackOfToken: LineSDKObjC.LineSDKAuthorizationStatus
  @objc public static let lackOfPermissions: LineSDKObjC.LineSDKAuthorizationStatus
  @objc public init(rawValue: Swift.Int)
  public static func status(from s: LineSDK.AuthorizationStatus) -> LineSDKObjC.LineSDKAuthorizationStatus
  @objc deinit
}
@objc public protocol LineSDKShareTarget {
  @objc var targetID: Swift.String { get }
  @objc var displayName: Swift.String { get }
  @objc var avatarURL: Foundation.URL? { get }
}
extension LineSDKObjC.LineSDKUser : LineSDKObjC.LineSDKShareTarget {
  @objc dynamic public var targetID: Swift.String {
    @objc get
  }
  @objc dynamic public var avatarURL: Foundation.URL? {
    @objc get
  }
}
extension LineSDKObjC.LineSDKGroup : LineSDKObjC.LineSDKShareTarget {
  @objc dynamic public var targetID: Swift.String {
    @objc get
  }
  @objc dynamic public var displayName: Swift.String {
    @objc get
  }
  @objc dynamic public var avatarURL: Foundation.URL? {
    @objc get
  }
}
@objc @objcMembers public class LineSDKTextMessage : LineSDKObjC.LineSDKMessage {
  @objc public var text: Swift.String
  @objc public var sender: LineSDKObjC.LineSDKMessageSender?
  @objc convenience public init(text: Swift.String)
  @objc public init(text: Swift.String, sender: LineSDKObjC.LineSDKMessageSender?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LineSDKLoginManagerParameters : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var onlyWebLogin: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var botPromptStyle: LineSDKObjC.LineSDKLoginManagerBotPrompt? {
    @objc get
    @objc set
  }
  @objc public var preferredWebPageLanguage: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var IDTokenNonce: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKLoginManagerBotPrompt : ObjectiveC.NSObject {
  @objc public static let normal: LineSDKObjC.LineSDKLoginManagerBotPrompt
  @objc public static let aggressive: LineSDKObjC.LineSDKLoginManagerBotPrompt
  @objc public var rawValue: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol LineSDKShareViewControllerDelegate {
  @objc optional func shareViewController(_ controller: LineSDKObjC.LineSDKShareViewController, didFailLoadingListType shareType: LineSDKObjC.LineSDKMessageShareTargetType, withError error: Swift.Error)
  @objc optional func shareViewControllerDidCancelSharing(_ controller: LineSDKObjC.LineSDKShareViewController)
  @objc optional func shareViewController(_ controller: LineSDKObjC.LineSDKShareViewController, didFailSendingMessages messages: [LineSDKObjC.LineSDKMessage], toTargets targets: [LineSDKObjC.LineSDKShareTarget], withError error: Swift.Error)
  @objc optional func shareViewController(_ controller: LineSDKObjC.LineSDKShareViewController, didSendMessages messages: [LineSDKObjC.LineSDKMessage], toTargets targets: [LineSDKObjC.LineSDKShareTarget])
  @objc optional func shareViewController(_ controller: LineSDKObjC.LineSDKShareViewController, messagesForSendingToTargets targets: [LineSDKObjC.LineSDKShareTarget]) -> [LineSDKObjC.LineSDKMessage]
  @objc optional func shareViewControllerShouldDismissAfterSending(_ controller: LineSDKObjC.LineSDKShareViewController) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKFlexMessage : LineSDKObjC.LineSDKMessage {
  @objc public var altText: Swift.String
  @objc public var contents: LineSDKObjC.LineSDKFlexMessageContainer
  @objc public init(altText: Swift.String, container: LineSDKObjC.LineSDKFlexMessageContainer)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKMessageSendingStatus : ObjectiveC.NSObject {
  @objc public static let statusOK: LineSDKObjC.LineSDKMessageSendingStatus
  @objc public static let statusDiscarded: LineSDKObjC.LineSDKMessageSendingStatus
  @objc public func isEqualToStatus(_ another: LineSDKObjC.LineSDKMessageSendingStatus) -> Swift.Bool
  @objc public var isOK: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKPostSendMessagesResponse : ObjectiveC.NSObject {
  @objc public var status: LineSDKObjC.LineSDKMessageSendingStatus {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKPostMultisendMessagesResponseSendingResult : ObjectiveC.NSObject {
  @objc public var to: Swift.String {
    @objc get
  }
  @objc public var status: LineSDKObjC.LineSDKMessageSendingStatus {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKPostMultisendMessagesResponse : ObjectiveC.NSObject {
  @objc public var result: [LineSDKObjC.LineSDKPostMultisendMessagesResponseSendingResult] {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKImageMessage : LineSDKObjC.LineSDKMessage {
  @objc final public let originalContentURL: Foundation.URL
  @objc final public let previewImageURL: Foundation.URL
  @objc public var animated: Swift.Bool
  @objc public var fileExtension: Swift.String?
  @objc public var sender: LineSDKObjC.LineSDKMessageSender?
  @objc convenience public init?(originalContentURL: Foundation.URL, previewImageURL: Foundation.URL)
  @objc public init?(originalContentURL: Foundation.URL, previewImageURL: Foundation.URL, animated: Swift.Bool, fileExtension: Swift.String?, sender: LineSDKObjC.LineSDKMessageSender?)
  @objc deinit
}
@objc public enum LineSDKFlexButtonComponentStyle : Swift.Int {
  case none
  case link
  case primary
  case secondary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class LineSDKFlexButtonComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc public var action: LineSDKObjC.LineSDKMessageAction
  @objc public var flex: Foundation.NSNumber?
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var height: LineSDKObjC.LineSDKFlexMessageComponentHeight
  @objc public var style: LineSDKObjC.LineSDKFlexButtonComponentStyle
  @objc public var color: LineSDKObjC.LineSDKHexColor?
  @objc public var gravity: LineSDKObjC.LineSDKFlexMessageComponentGravity
  @objc public init(action: LineSDKObjC.LineSDKMessageAction)
  @objc deinit
}
@objc @objcMembers public class LineSDKFlexSeparatorComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var color: LineSDKObjC.LineSDKHexColor?
  @objc public init(margin: LineSDKObjC.LineSDKFlexMessageComponentMargin, color: LineSDKObjC.LineSDKHexColor?)
  @objc deinit
}
@objc @objcMembers public class LineSDKFlexSpacerComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc public var size: LineSDKObjC.LineSDKFlexMessageComponentSize
  @objc public init(size: LineSDKObjC.LineSDKFlexMessageComponentSize)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKAPIError : ObjectiveC.NSObject {
  @objc public var error: Swift.String {
    @objc get
  }
  @objc public var detail: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKLocationMessage : LineSDKObjC.LineSDKMessage {
  @objc public var title: Swift.String
  @objc public var address: Swift.String
  @objc public var latitude: Swift.Double
  @objc public var longitude: Swift.Double
  @objc public init(title: Swift.String, address: Swift.String, latitude: Swift.Double, longitude: Swift.Double)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKOpenChatRoomJoinType : ObjectiveC.NSObject {
  @objc public var type: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKFlexMessageComponent : ObjectiveC.NSObject {
  @objc public var boxComponent: LineSDKObjC.LineSDKFlexBoxComponent? {
    @objc get
  }
  @objc public var textComponent: LineSDKObjC.LineSDKFlexTextComponent? {
    @objc get
  }
  @objc public var buttonComponent: LineSDKObjC.LineSDKFlexButtonComponent? {
    @objc get
  }
  @objc public var imageComponent: LineSDKObjC.LineSDKFlexImageComponent? {
    @objc get
  }
  @objc public var fillerComponent: LineSDKObjC.LineSDKFlexFillerComponent? {
    @objc get
  }
  @objc public var iconComponent: LineSDKObjC.LineSDKFlexIconComponent? {
    @objc get
  }
  @objc public var separatorComponent: LineSDKObjC.LineSDKFlexSeparatorComponent? {
    @objc get
  }
  @objc public var spacerComponent: LineSDKObjC.LineSDKFlexSpacerComponent? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LineSDKFlexMessageComponentLayout : Swift.Int {
  case horizontal, vertical, baseline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentSpacing : Swift.Int {
  case none, xs, sm, md, lg, xl, xxl
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentMargin : Swift.Int {
  case none, xs, sm, md, lg, xl, xxl
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentSize : Swift.Int {
  case none, xxs, xs, sm, md, lg, xl, xxl, xl3, xl4, xl5, full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentAlignment : Swift.Int {
  case none, start, end, center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentGravity : Swift.Int {
  case none, top, bottom, center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentWeight : Swift.Int {
  case none, regular, bold
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentHeight : Swift.Int {
  case none, sm, md
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentAspectRatio : Swift.Int {
  case none, ratio_1x1, ratio_1_51x1, ratio_1_91x1, ratio_4x3, ratio_16x9, ratio_20x13, ratio_2x1, ratio_3x1, ratio_3x4, ratio_9x16, ratio_1x2, ratio_1x3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LineSDKFlexMessageComponentAspectMode : Swift.Int {
  case none, fill, fit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class LineSDKFlexImageComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc final public let url: Foundation.URL
  @objc public var flex: Foundation.NSNumber?
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var alignment: LineSDKObjC.LineSDKFlexMessageComponentAlignment
  @objc public var gravity: LineSDKObjC.LineSDKFlexMessageComponentGravity
  @objc public var size: LineSDKObjC.LineSDKFlexMessageComponentSize
  @objc public var aspectRatio: LineSDKObjC.LineSDKFlexMessageComponentAspectRatio
  @objc public var aspectMode: LineSDKObjC.LineSDKFlexMessageComponentAspectMode
  @objc public var backgroundColor: LineSDKObjC.LineSDKHexColor?
  @objc public init?(imageURL: Foundation.URL)
  @objc deinit
}
@objc @objcMembers public class LineSDKFlexIconComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc final public let url: Foundation.URL
  @objc public var margin: LineSDKObjC.LineSDKFlexMessageComponentMargin
  @objc public var size: LineSDKObjC.LineSDKFlexMessageComponentSize
  @objc public var aspectRatio: LineSDKObjC.LineSDKFlexMessageComponentAspectRatio
  @objc public init?(iconURL: Foundation.URL)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKAccessToken : ObjectiveC.NSObject {
  @objc public var value: Swift.String {
    @objc get
  }
  @objc public var createdAt: Foundation.Date {
    @objc get
  }
  @objc public var IDToken: LineSDKObjC.LineSDKJWT? {
    @objc get
  }
  @objc public var permissions: [LineSDKObjC.LineSDKLoginPermission] {
    @objc get
  }
  @objc public var expiresAt: Foundation.Date {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKOpenChatRoomMembershipState : ObjectiveC.NSObject {
  @objc public var state: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKVideoMessage : LineSDKObjC.LineSDKMessage {
  @objc final public let originalContentURL: Foundation.URL
  @objc final public let previewImageURL: Foundation.URL
  @objc public init?(originalContentURL: Foundation.URL, previewImageURL: Foundation.URL)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKMessageSendingToken : ObjectiveC.NSObject {
  @objc public var token: Swift.String {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class LineSDKAudioMessage : LineSDKObjC.LineSDKMessage {
  @objc final public let originalContentURL: Foundation.URL
  @objc final public let duration: Foundation.TimeInterval
  @objc public init?(originalContentURL: Foundation.URL, duration: Foundation.TimeInterval)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKFlexMessageContainer : ObjectiveC.NSObject {
  @objc public var bubbleContainer: LineSDKObjC.LineSDKFlexBubbleContainer? {
    @objc get
  }
  @objc public var carouselContainer: LineSDKObjC.LineSDKFlexCarouselContainer? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LineSDKMessageShareTargetType : Swift.Int {
  case friends
  case groups
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKFlexBubbleContainer : LineSDKObjC.LineSDKFlexMessageContainer {
  @objc public var header: LineSDKObjC.LineSDKFlexBoxComponent?
  @objc public var hero: LineSDKObjC.LineSDKFlexImageComponent?
  @objc public var body: LineSDKObjC.LineSDKFlexBoxComponent?
  @objc public var footer: LineSDKObjC.LineSDKFlexBoxComponent?
  @objc public var style: LineSDKObjC.LineSDKFlexBubbleContainerStyle?
  @objc public var direction: LineSDKObjC.LineSDKFlexBubbleContainerDirection
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKFlexBubbleContainerStyle : ObjectiveC.NSObject {
  @objc public var header: LineSDKObjC.LineSDKFlexBlockStyle?
  @objc public var hero: LineSDKObjC.LineSDKFlexBlockStyle?
  @objc public var body: LineSDKObjC.LineSDKFlexBlockStyle?
  @objc public var footer: LineSDKObjC.LineSDKFlexBlockStyle?
  @objc override dynamic public init()
  convenience public init(_ value: LineSDK.FlexBubbleContainer.Style)
  @objc deinit
}
@objc public enum LineSDKFlexBubbleContainerDirection : Swift.Int {
  case none
  case leftToRight
  case rightToLeft
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class LineSDKFlexBlockStyle : ObjectiveC.NSObject {
  @objc public var backgroundColor: LineSDKObjC.LineSDKHexColor?
  @objc public var separator: Swift.Bool
  @objc public var separatorColor: LineSDKObjC.LineSDKHexColor?
  @objc public init(backgroundColor: LineSDKObjC.LineSDKHexColor?, separator: Swift.Bool, separatorColor: LineSDKObjC.LineSDKHexColor?)
  convenience public init(_ value: LineSDK.FlexBlockStyle)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKGetBotFriendshipStatusResponse : ObjectiveC.NSObject {
  @objc public var friendFlag: Swift.Bool {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKShareViewController : ObjectiveC.NSObject {
  @objc public var viewController: UIKit.UIViewController {
    @objc get
  }
  @objc public var shareNavigationBarTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var shareNavigationBarTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var shareStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
    @objc set
  }
  @objc public var shareMessages: [LineSDKObjC.LineSDKMessage]? {
    @objc get
    @objc set
  }
  @objc public var delegate: LineSDKObjC.LineSDKShareViewControllerDelegate? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public static func localAuthorizationStatusForSendingMessage() -> LineSDKObjC.LineSDKAuthorizationStatus
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKMessageAction : ObjectiveC.NSObject {
  @objc public var URIAction: LineSDKObjC.LineSDKMessageURIAction? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class LineSDKMessageURIAction : LineSDKObjC.LineSDKMessageAction {
  @objc public var label: Swift.String?
  @objc public var uri: Foundation.URL
  @objc public init(label: Swift.String?, uri: Foundation.URL)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LineSDKFlexFillerComponent : LineSDKObjC.LineSDKFlexMessageComponent {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKOpenChatRoomCreatingItem : ObjectiveC.NSObject {
  @objc public var name: Swift.String {
    @objc get
  }
  @objc public var roomDescription: Swift.String {
    @objc get
  }
  @objc public var creatorDisplayName: Swift.String {
    @objc get
  }
  @objc public var category: Swift.Int {
    @objc get
  }
  @objc public var allowSearch: Swift.Bool {
    @objc get
  }
  @objc public init(name: Swift.String, roomDescription: Swift.String, creatorDisplayName: Swift.String, category: Swift.Int, allowSearch: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKHexColor : ObjectiveC.NSObject {
  @objc public var rawValue: Swift.String {
    @objc get
  }
  @objc public var color: UIKit.UIColor {
    @objc get
  }
  @objc public init(_ color: UIKit.UIColor)
  @objc public init(rawValue: Swift.String, defaultColor color: UIKit.UIColor)
  @objc public func isEqualsToColor(_ another: LineSDKObjC.LineSDKHexColor) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKLoginResult : ObjectiveC.NSObject {
  @objc public var accessToken: LineSDKObjC.LineSDKAccessToken {
    @objc get
  }
  @objc public var permissions: Swift.Set<LineSDKObjC.LineSDKLoginPermission> {
    @objc get
  }
  @objc public var userProfile: LineSDKObjC.LineSDKUserProfile? {
    @objc get
  }
  @objc public var friendshipStatusChanged: Foundation.NSNumber? {
    @objc get
  }
  @objc public var IDTokenNonce: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKLoginProcess : ObjectiveC.NSObject {
  @objc public func stop()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKOpenChatRoomInfo : ObjectiveC.NSObject {
  @objc public var openChatId: Swift.String {
    @objc get
  }
  @objc public var url: Foundation.URL {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKErrorConstant : ObjectiveC.NSObject {
  @objc public static let errorDomain: Swift.String
  @objc public static let cryptoErrorDomain: Swift.String
  @objc public static let userInfoKeyUnderlyingError: Swift.String
  @objc public static let userInfoKeyStatusCode: Swift.String
  @objc public static let userInfoKeyResultCode: Swift.String
  @objc public static let userInfoKeyType: Swift.String
  @objc public static let userInfoKeyData: Swift.String
  @objc public static let userInfoKeyAPIError: Swift.String
  @objc public static let userInfoKeyRaw: Swift.String
  @objc public static let userInfoKeyUrl: Swift.String
  @objc public static let userInfoKeyMessage: Swift.String
  @objc public static let userInfoKeyStatus: Swift.String
  @objc public static let userInfoKeyText: Swift.String
  @objc public static let userInfoKeyEncoding: Swift.String
  @objc public static let userInfoKeyParameterName: Swift.String
  @objc public static let userInfoKeyReason: Swift.String
  @objc public static let userInfoKeyIndex: Swift.String
  @objc public static let userInfoKeyKey: Swift.String
  @objc public static let userInfoKeyGot: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class LineSDKLoginPermission : ObjectiveC.NSObject {
  @objc public init(rawValue: Swift.String)
  @objc public static func permissions(from string: Swift.String) -> Swift.Set<LineSDKObjC.LineSDKLoginPermission>
  @objc public static let openID: LineSDKObjC.LineSDKLoginPermission
  @objc public static let profile: LineSDKObjC.LineSDKLoginPermission
  @objc public static let friends: LineSDKObjC.LineSDKLoginPermission
  @objc public static let groups: LineSDKObjC.LineSDKLoginPermission
  @objc public static let oneTimeShare: LineSDKObjC.LineSDKLoginPermission
  @objc public static let messageWrite: LineSDKObjC.LineSDKLoginPermission
  @objc public static let email: LineSDKObjC.LineSDKLoginPermission
  @objc public static let phone: LineSDKObjC.LineSDKLoginPermission
  @objc public static let gender: LineSDKObjC.LineSDKLoginPermission
  @objc public static let birthdate: LineSDKObjC.LineSDKLoginPermission
  @objc public static let address: LineSDKObjC.LineSDKLoginPermission
  @objc public static let realName: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatTermStatus: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatRoomCreateAndJoin: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatInfo: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatPlugManagement: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatPlugInfo: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatPlugProfile: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatPlugSendMessage: LineSDKObjC.LineSDKLoginPermission
  @objc public static let openChatPlugReceiveMessageEvent: LineSDKObjC.LineSDKLoginPermission
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKOpenChatCreatingController : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var delegate: LineSDKObjC.LineSDKOpenChatCreatingControllerDelegate? {
    @objc get
    @objc set
  }
  @objc public var suggestedCategory: Swift.Int {
    @objc get
    @objc set
  }
  @objc public func loadAndPresent(in viewController: UIKit.UIViewController, presentedHandler handler: @escaping (UIKit.UIViewController?, Swift.Error?) -> Swift.Void)
  @objc public static func localAuthorizationStatusForCreatingOpenChat() -> LineSDKObjC.LineSDKAuthorizationStatus
  @objc deinit
}
@objc public protocol LineSDKLoginButtonDelegate {
  @objc func loginButtonDidStartLogin(_ button: LineSDKObjC.LineSDKLoginButton)
  @objc func loginButton(_ button: LineSDKObjC.LineSDKLoginButton, didSucceedLogin loginResult: LineSDKObjC.LineSDKLoginResult?)
  @objc func loginButton(_ button: LineSDKObjC.LineSDKLoginButton, didFailLogin error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LineSDKLoginButton : ObjectiveC.NSObject {
  @objc public var button: UIKit.UIButton {
    @objc get
  }
  @objc public enum LineSDKLoginButtonSize : Swift.Int {
    case small
    case normal
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc weak public var loginDelegate: LineSDKObjC.LineSDKLoginButtonDelegate?
  @objc weak public var buttonPresentingViewController: UIKit.UIViewController?
  @objc public var loginPermissions: Swift.Set<LineSDKObjC.LineSDKLoginPermission>
  @objc public var loginManagerParameters: LineSDKObjC.LineSDKLoginManagerParameters
  @objc public var buttonSizeValue: LineSDKObjC.LineSDKLoginButton.LineSDKLoginButtonSize {
    @objc get
    @objc set
  }
  @objc public var buttonTextValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func login()
  @objc @available(*, deprecated, message: "Use `LineSDKLoginButton.loginManagerParameters` instead.")
  public var loginManagerOptions: [LineSDKObjC.LineSDKLoginManagerOptions]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LineSDKLoginManager : ObjectiveC.NSObject {
  @objc public static let sharedManager: LineSDKObjC.LineSDKLoginManager
  @objc public var currentProcess: LineSDKObjC.LineSDKLoginProcess? {
    @objc get
  }
  @objc public var isSetupFinished: Swift.Bool {
    @objc get
  }
  @objc public var isAuthorized: Swift.Bool {
    @objc get
  }
  @objc public var isAuthorizing: Swift.Bool {
    @objc get
  }
  @objc @available(*, deprecated, message: "Set `preferredWebPageLanguage` in `LineSDKLoginManagerParameters` instead.")
  public var preferredWebPageLanguage: Swift.String? {
    @objc get
    @objc set
  }
  @objc public func setup(channelID: Swift.String, universalLinkURL: Foundation.URL?)
  @objc @discardableResult
  public func login(permissions: Swift.Set<LineSDKObjC.LineSDKLoginPermission>?, inViewController viewController: UIKit.UIViewController?, completionHandler completion: @escaping (LineSDKObjC.LineSDKLoginResult?, Swift.Error?) -> Swift.Void) -> LineSDKObjC.LineSDKLoginProcess?
  @objc @discardableResult
  public func login(permissions: Swift.Set<LineSDKObjC.LineSDKLoginPermission>?, inViewController viewController: UIKit.UIViewController?, parameters: LineSDKObjC.LineSDKLoginManagerParameters, completionHandler completion: @escaping (LineSDKObjC.LineSDKLoginResult?, Swift.Error?) -> Swift.Void) -> LineSDKObjC.LineSDKLoginProcess?
  @objc public func logout(completionHandler completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @objc @available(*, deprecated, message: "Convert the `options` to a `LoginManager.Parameters` value and\nuse `login(permissions:inViewController:parameters:completionHandler:)` instead.\")")
  @discardableResult
  public func login(permissions: Swift.Set<LineSDKObjC.LineSDKLoginPermission>?, inViewController viewController: UIKit.UIViewController?, options: [LineSDKObjC.LineSDKLoginManagerOptions]?, completionHandler completion: @escaping (LineSDKObjC.LineSDKLoginResult?, Swift.Error?) -> Swift.Void) -> LineSDKObjC.LineSDKLoginProcess?
  @objc deinit
}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageAspectRatio : Swift.Equatable {}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageAspectRatio : Swift.Hashable {}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageAspectRatio : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageContentMode : Swift.Equatable {}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageContentMode : Swift.Hashable {}
extension LineSDKObjC.LineSDKTemplateMessagePayloadImageContentMode : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKGetFriendsRequestSort : Swift.Equatable {}
extension LineSDKObjC.LineSDKGetFriendsRequestSort : Swift.Hashable {}
extension LineSDKObjC.LineSDKGetFriendsRequestSort : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexButtonComponentStyle : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexButtonComponentStyle : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexButtonComponentStyle : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentLayout : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentLayout : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentLayout : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSpacing : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSpacing : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSpacing : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentMargin : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentMargin : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentMargin : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSize : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSize : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentSize : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAlignment : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAlignment : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAlignment : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentGravity : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentGravity : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentGravity : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentWeight : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentWeight : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentWeight : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentHeight : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentHeight : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentHeight : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectRatio : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectRatio : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectRatio : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectMode : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectMode : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexMessageComponentAspectMode : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKMessageShareTargetType : Swift.Equatable {}
extension LineSDKObjC.LineSDKMessageShareTargetType : Swift.Hashable {}
extension LineSDKObjC.LineSDKMessageShareTargetType : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKFlexBubbleContainerDirection : Swift.Equatable {}
extension LineSDKObjC.LineSDKFlexBubbleContainerDirection : Swift.Hashable {}
extension LineSDKObjC.LineSDKFlexBubbleContainerDirection : Swift.RawRepresentable {}
extension LineSDKObjC.LineSDKLoginButton.LineSDKLoginButtonSize : Swift.Equatable {}
extension LineSDKObjC.LineSDKLoginButton.LineSDKLoginButtonSize : Swift.Hashable {}
extension LineSDKObjC.LineSDKLoginButton.LineSDKLoginButtonSize : Swift.RawRepresentable {}
